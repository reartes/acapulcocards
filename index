<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Cards — All</title>
<style>
  :root{ --bg:#F2EEE9; --fg:#000; --muted:#4d4d4d; --track:0.08em; }
  html,body{margin:0}
  body{
    background:var(--bg); color:var(--fg);
    font-family:Futura,"Avenir Next",Avenir,"Helvetica Neue",Helvetica,Arial,sans-serif;
    letter-spacing:var(--track);
  }
  header{position:sticky;top:0;background:var(--bg);padding:16px 20px;border-bottom:1px solid #0001}
  header h1{margin:0;font-size:16px;font-weight:500}
  .wrap{max-width:1100px;margin:0 auto;padding:28px}
  .grid{
    display:grid;
    grid-template-columns:repeat(auto-fill,minmax(280px,1fr));
    gap:28px;
  }
  .card{
    background:#fffefc;border:1px solid #0002;border-radius:16px;
    padding:24px 22px; display:grid; gap:24px; min-height:220px;
    box-shadow:0 1px 0 #0001, 0 8px 30px rgba(0,0,0,.05);
  }
  .instr{
    font-size:clamp(20px,2.4vw,28px);
    font-weight:400; text-transform:uppercase; line-height:1.15;
    letter-spacing:calc(var(--track)*1.5);
  }
  .explain{
    font-size:16px; color:var(--muted); line-height:1.5;
    letter-spacing:var(--track); text-transform:none;
  }
  .meta{font-size:12px;color:#0008;letter-spacing:.06em}
  .tools{display:flex;gap:10px;align-items:center}
  .tools input{
    width:100%;max-width:420px;padding:10px 12px;border:1px solid #0002;border-radius:999px;background:#fffefc;
    font-family:inherit;letter-spacing:var(--track);
  }
  .tools button{padding:10px 14px;border:1px solid #000;border-radius:999px;background:transparent;cursor:pointer;font-family:inherit;letter-spacing:var(--track)}
  @media (max-width:520px){
    .wrap{padding:18px}
    .grid{gap:18px}
    .card{gap:20px;padding:20px}
  }
</style>
</head>
<body>
<header>
  <div class="wrap">
    <div class="tools">
      <input id="q" type="search" placeholder="filter cards…" aria-label="filter" />
      <button id="clear">clear</button>
      <div class="meta" id="count"></div>
    </div>
  </div>
</header>

<main class="wrap">
  <section id="grid" class="grid" aria-live="polite"></section>
</main>

<script>
/* Paste your full list here. Each item: { instr: "...", explain: "..." } */
const prompts = [
  {instr:"ASK THE MATERIAL WHAT IT REFUSES", explain:"resistance reveals the form's boundary"},
  {instr:"LET REPETITION BECOME TRANCE", explain:"when rhythm replaces intention, the work begins to breathe"},
  {instr:"BEGIN AT THE EDGE, NOT THE CENTER", explain:"edges invite decisions; centers hide them"},
  {instr:"INVITE THE BODY BEFORE THE MIND", explain:"understanding arrives through weight, balance, and reach"},
  {instr:"LET SPACE FINISH THE SENTENCE", explain:"leave a gap and let the room write the rest"}
  // ← add all remaining entries here (up to your 100/300)
];

const grid = document.getElementById('grid');
const count = document.getElementById('count');
const q = document.getElementById('q');
const clearBtn = document.getElementById('clear');

function cardTemplate(p, i){
  const id = `c${i}`;
  return `
    <article class="card" id="${id}">
      <div class="instr">${p.instr}</div>
      <div class="explain">${String(p.explain||"").toLowerCase()}</div>
      <div class="meta">#${i+1}</div>
    </article>
  `;
}

function render(list){
  grid.innerHTML = list.map(cardTemplate).join('');
  count.textContent = `${list.length} / ${prompts.length}`;
}

function filterList(term){
  term = term.trim().toLowerCase();
  if(!term) return prompts;
  return prompts.filter(p =>
    (p.instr||"").toLowerCase().includes(term) ||
    (p.explain||"").toLowerCase().includes(term)
  );
}

q.addEventListener('input', ()=> render(filterList(q.value)));
clearBtn.addEventListener('click', ()=>{ q.value = ""; render(prompts); q.focus(); });

/* Optional: scroll to hash index like #23 */
function scrollToHash(){
  const h = location.hash.replace('#','');
  if(!h) return;
  const idx = parseInt(h,10);
  if(!isNaN(idx) && idx>=0 && idx<prompts.length){
    const el = document.getElementById(`c${idx}`);
    if(el){ el.scrollIntoView({behavior:'smooth', block:'center'}); el.style.outline='2px solid #000'; setTimeout(()=>el.style.outline='none',1200); }
  }
}

render(prompts);
scrollToHash();
window.addEventListener('hashchange', scrollToHash);
</script>
</body>
</html>


